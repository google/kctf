name: Update docker images

on:
  push:
    paths-ignore: 
      - 'docs/**' 
      - '*.md'
  pull_request:
    paths-ignore: 
      - 'docs/**' 
      - '*.md'

env:
  GKE_PROJECT: ${{ secrets.GKE_PROJECT }}
  GKE_ZONE: us-east1-c
  GKE_CLUSTER: github-ci
  GKE_REGISTRY: us.gcr.io

jobs:
  build-docker:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    outputs:
      kctf-operator-modified: ${{ steps.set-modified.outputs.kctf-operator-modified }}
      challenge-modified: ${{ steps.set-modified.outputs.challenge-modified }}
      healthcheck-modified: ${{ steps.set-modified.outputs.healthcheck-modified }}
      kctf-operator-digest: ${{ steps.push.outputs.kctf-operator-digest }}
      challenge-digest: ${{ steps.push.outputs.challenge-digest }}
      healthcheck-digest: ${{ steps.push.outputs.healthcheck-digest }}
    strategy:
      matrix:
        image: ["kctf-operator", "challenge", "healthcheck"]
    steps:
    - uses: actions/checkout@v2
      with:
          fetch-depth: 0

    - id: modified
      name: Check for modified paths
      run: |
        if [ "${{ matrix.image }}" == "kctf-operator" ]; then
          PATHS=(".github/workflows/update-images.yaml" "kctf-operator/*" "kctf-operator/build/**" "kctf-operator/cmd/**" "kctf-operator/pkg/**" "kctf-operator/version/**")
        else
          PATHS=(".github/workflows/update-images.yaml" "docker-images/${{ matrix.image }}/**")
        fi

        BASE_SHA="$(git log -n1 --grep='Automated commit: update images.' --format=%H || echo '')"
        echo "BASE_SHA=${BASE_SHA}"
        if [ -z "${BASE_SHA}" ]; then
          # we couldn't find any existing robot commit, just rebuild everything
          echo "::set-output name=modified::true"
          exit 0
        fi
        CHANGED_FILES="$(git diff --name-only ${BASE_SHA} ${{ github.sha }})"
        echo "CHANGED_FILES=${CHANGED_FILES}"

        while IFS= read -r changed_file; do
          for watched_path in "${PATHS[@]}"; do
            if [[ $changed_file == $watched_path ]]; then
              echo "modified=true: ${changed_file} matches ${watched_path}"
              echo "::set-output name=modified::true"
              exit 0
            fi
          done
        done <<< "${CHANGED_FILES}"

    - id: set-modified
      name: Set modified
      run: |
        echo "::set-output name=${{ matrix.image }}-modified::${{ steps.modified.outputs.modified }}"


    - name: Build image
      if: steps.modified.outputs.modified
      run: |
        if [ "${{ matrix.image }}" == "kctf-operator" ]; then
          cd kctf-operator
          curl -L https://github.com/operator-framework/operator-sdk/releases/download/v0.18.2/operator-sdk-v0.18.2-x86_64-linux-gnu -o operator-sdk
          chmod u+x operator-sdk
          sudo mv operator-sdk /usr/local/bin/
          /usr/local/bin/operator-sdk build "${{ matrix.image }}"
        else
          cd "docker-images/${{ matrix.image }}"
          docker build . --tag "${{ matrix.image }}"
        fi

    - name: Setup gcloud CLI
      if: steps.modified.outputs.modified
      uses: google-github-actions/setup-gcloud@master
      with:
        version: '319.0.0'
        service_account_email: ${{ secrets.GCR_EMAIL }}
        service_account_key: ${{ secrets.GCR_KEY }}

    - name: Configure docker to use the gcloud command-line tool as a credential helper
      if: steps.modified.outputs.modified
      run: |
        gcloud auth configure-docker

    - id: push
      name: Push images
      if: steps.modified.outputs.modified
      run: |
        IMAGE_GCR="gcr.io/${{ secrets.GCR_PROJECT }}/${{ matrix.image }}"
        docker tag "${{ matrix.image }}" "$IMAGE_GCR"
        DIGEST="$(docker push "$IMAGE_GCR" | grep 'digest: ' | sed 's/.*\(sha256:[^ ]*\).*/\1/')"
        echo "::set-output name=${{ matrix.image }}-digest::${DIGEST}"

  update-image-and-commit:
    runs-on: ubuntu-latest
    needs:
    - build-docker
    steps:
    - uses: actions/checkout@v2

    - name: Update challenge image
      if: needs.build-docker.outputs.challenge-modified
      run: |
        IMAGE="gcr.io/kctf-docker/challenge@${{ needs.build-docker.outputs.challenge-digest }}"
        for dir in dist/challenge-templates/* samples/*; do
          if [[ -e "${dir}/challenge/image/Dockerfile" ]]; then
            sed -i "s#FROM gcr.io/kctf-docker/challenge.*#FROM ${IMAGE}#" "${dir}/challenge/image/Dockerfile"
          fi
        done

    - name: Update healthcheck image
      if: needs.build-docker.outputs.healthcheck-modified
      run: |
        IMAGE="gcr.io/kctf-docker/healthcheck@${{ needs.build-docker.outputs.healthcheck-digest }}"
        for dir in dist/challenge-templates/* samples/*; do
          if [[ -e "${dir}/healthcheck/image/Dockerfile" ]]; then
            sed -i "s#FROM gcr.io/kctf-docker/healthcheck.*#FROM ${IMAGE}#" "${dir}/healthcheck/image/Dockerfile"
          fi
        done

    - name: Update operator
      if: needs.build-docker.outputs.kctf-operator-modified
      run: |
        IMAGE="gcr.io/kctf-docker/kctf-operator@${{ needs.build-docker.outputs.kctf-operator-digest }}"
        sed -i "s#image: .*#image: ${IMAGE}#" dist/resources/operator.yaml

    - name: Download kubectl
      run: |
        curl -LO https://storage.googleapis.com/kubernetes-release/release/`curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt`/bin/linux/amd64/kubectl
        chmod +x ./kubectl
        sudo mv ./kubectl /usr/local/bin/kubectl

    - name: Setup gcloud CLI
      uses: google-github-actions/setup-gcloud@master
      with:
        version: '319.0.0'
        service_account_email: ${{ secrets.GKE_EMAIL }}
        service_account_key: ${{ secrets.GKE_KEY }}

    - name: Configure docker to use the gcloud command-line tool as a credential helper
      run: |
        gcloud auth configure-docker

    - name: Configure kCTF cluster
      run: |
        source samples/kctf/activate
        kctf config create --project $GKE_PROJECT --zone $GKE_ZONE --registry $GKE_REGISTRY --cluster-name $GKE_CLUSTER --domain-name $GKE_CLUSTER.kctf.dev --start-cluster test

    # TODO: this should use challenge templates instead so that we don't have to patch all the images
    - name: Expose sample tasks
      run: |
        for f in samples/*/challenge.yaml; do
          sed -i "s/public: false/public: true/" $f
        done

    - name: Deploy all tasks
      run: |
        source samples/kctf/activate
        cd samples
        for challenge_name in $(kubectl get challenges -o "jsonpath={.items[*].metadata.name}"); do
          kubectl delete "challenge/${challenge_name}"
        done
        for f in *; do
          if [ "$f" == "kctf" ]; then
            continue
          fi
          pushd $f
            CHALLENGE_NAME="$("${KCTF_BIN}/yq" eval '.metadata.name' challenge.yaml)"
            kctf chal start
            # We want to wait for the deployment to be available, but it
            # might not have been created yet by the operator and wait will fail.
            # So try to "kubectl get" the challenge a few times to make sure it exists.
            # Ideally, we would expose the condition in the operator but I
            # don't think that's currently possible.
            for i in {1..5}; do
              kubectl get "deployment/${CHALLENGE_NAME}" && break
              echo "deployment/${CHALLENGE_NAME} doesn't exist yet, sleeping"
              sleep 5
            done
            kubectl wait --for=condition=available --timeout=5m "deployment/${CHALLENGE_NAME}"
            kctf chal stop
          popd
        done

    - name: Commit
      run: |
        # git add returns success for files that exist and haven't been modified
        git add dist/resources/operator.yaml
        for dir in dist/challenge-templates/* samples/*; do
          if [[ ! -e "${dir}/challenge.yaml" ]]; then
            continue
          fi
          git add "${dir}/challenge/image/Dockerfile"
          # not all challenges might have healthchecks, ignore errors
          git add "${dir}/healthcheck/image/Dockerfile" 2>&1 || true
        done
        git status
        git config user.email ${{ github.event.head_commit.author.email }}
        git config user.name ${{ github.event.head_commit.author.name }}
        if git commit -m "Automated commit: update images."; then
          git push
        fi
