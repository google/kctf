# Copyright 2020 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# set up the environment variables
KCTF_CONFIG_DIR="${HOME}/.config/kctf"
KCTF_CTF_DIR="$(realpath --no-symlinks "$(dirname "${BASH_SOURCE-$0}")/..")"
CTF_NAME=$(basename "${KCTF_CTF_DIR}")
KCTF_BIN="${KCTF_CTF_DIR}/kctf/bin"
KCTF_SESSION="$(dd if=/dev/urandom bs=1 count=10 2>/dev/null | xxd -ps -c 10)"

function _kctf_download_dependencies {
  if [[ ! -x "${KCTF_BIN}/yq" ]]; then
    if [[ -e "${KCTF_BIN}/yq" ]]; then
      rm "${KCTF_BIN}/yq" >/dev/null
    fi
    wget "https://github.com/mikefarah/yq/releases/download/v4.2.0/yq_linux_amd64" -O "${KCTF_BIN}/yq" --quiet || return 1
    sha256sum --status -c <(echo "5d44bd64e264e9029c5f06bcd960ba162d7ed7ddd1781f02a28d62f50577b632  ${KCTF_BIN}/yq") || return 1
    chmod u+x "${KCTF_BIN}/yq"
  fi
}

function _kctf_export_variables {
  export KCTF_CTF_DIR
  export KCTF_BIN
  export CLOUDSDK_ACTIVE_CONFIG_NAME="kctf-${KCTF_SESSION}"
  export KUBECONFIG="${KCTF_CONFIG_DIR}/kube-${KCTF_SESSION}.conf"
}

function _kctf_cleanup {
  if command -v gcloud >/dev/null 2>&1; then
    unset CLOUDSDK_ACTIVE_CONFIG_NAME
    # regenerate this name in case the user changed the variable
    GCLOUD_CONFIG_NAME="kctf-${KCTF_SESSION}"
    if gcloud config configurations describe "${GCLOUD_CONFIG_NAME}" >/dev/null 2>&1; then
      echo "Deleting gcloud config ${GCLOUD_CONFIG_NAME}"
      CLOUDSDK_CORE_DISABLE_PROMPTS=1 gcloud config configurations delete "${GCLOUD_CONFIG_NAME}"
    fi
  fi
  # regenerate this name in case the user changed the variable
  KUBE_CONFIG_NAME="${KCTF_CONFIG_DIR}/kube-${KCTF_SESSION}.conf"
  if [[ -e "${KUBE_CONFIG_NAME}" ]]; then
    rm "${KUBE_CONFIG_NAME}" >/dev/null
  fi
}

function _kctf_update_gcloud_config {
  ACTIVE_ACCOUNT="$(CLOUDSDK_ACTIVE_CONFIG_NAME= gcloud config get-value core/account 2>/dev/null)"
  if ! gcloud config configurations describe "${CLOUDSDK_ACTIVE_CONFIG_NAME}" >/dev/null 2>/dev/null; then
        gcloud config configurations create --no-activate "${CLOUDSDK_ACTIVE_CONFIG_NAME}" >/dev/null 2>/dev/null || return 1
  fi
  gcloud config set core/account "${ACTIVE_ACCOUNT}" >/dev/null 2>/dev/null
  gcloud config set core/project "${PROJECT}" >/dev/null 2>/dev/null
  gcloud config set compute/zone "${ZONE}" >/dev/null 2>/dev/null
  gcloud config set container/cluster "${CLUSTER_NAME}" >/dev/null 2>/dev/null
}

function _kctf_get_cluster_creds {
  gcloud container clusters get-credentials "${CLUSTER_NAME}" >/dev/null 2>/dev/null || return 1
}

function _kctf_usage {
  echo "usage: kctf command subcommand [args]" 2>&1
  echo -e "\tavailable commands:" 2>&1
  echo -e "\t\tchal:\tcommands around challenges (creating, deploying, etc.)" 2>&1
  echo -e "\t\tcluster:\tcommands for managing the cluster " 2>&1
  echo -e "\t\tconfig:\tcreate/load a cluster config" 2>&1
}

# Implemented as a function so that we can set environment variables where needed
function kctf {
  if [[ $# -lt 1 ]]; then
    echo "missing required argument" >&2
    _kctf_usage
    return 1
  fi
  case "$1" in
    chal)
      shift
      "${KCTF_CTF_DIR}/kctf/bin/kctf-challenge" $@
      return
      ;;
    cluster)
      shift
      "${KCTF_CTF_DIR}/kctf/bin/kctf-cluster" $@
      return
      ;;
    config)
      shift
      _kctf_config $@
      return
      ;;
    *)
      _kctf_usage
      return 1
      ;;
  esac
}

function _kctf_error_cleanup {
  unset -f _kctf_download_dependencies
  unset -f _kctf_cleanup
  unset -f _kctf_update_gcloud_config
  unset -f _kctf_get_cluster_creds
  unset -f _kctf_usage
  unset -f kctf

  unset KCTF_CONFIG_DIR
  unset KCTF_CTF_DIR
  unset CTF_NAME
  unset KCTF_BIN
  unset KCTF_SESSION
}

function _kctf_activate {
  mkdir -p "${KCTF_CONFIG_DIR}" >/dev/null 2>/dev/null
  if ! _kctf_download_dependencies; then
    echo 'error downloading dependencies' >&2
    _kctf_error_cleanup
    return 1
  fi
  source "${KCTF_CTF_DIR}/kctf/bin/kctf-config"
  _kctf_export_variables
  PS1="${PS1}"$'\e[0;32m'"kCTF[ctf="$'\e[0;36m'"${CTF_NAME}"$'\e[0;32m'",config="$'\e[0;36m'"\${KCTF_CONFIG:-unset}"$'\e[0;32m'"] >"$'\e[0m'" "
}

if _kctf_activate; then
  trap _kctf_cleanup EXIT
fi
