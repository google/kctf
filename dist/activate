# Copyright 2020 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

KCTF_YQ_URL="https://github.com/mikefarah/yq/releases/download/v4.2.0/yq_linux_amd64"
KCTF_YQ_HASH="5d44bd64e264e9029c5f06bcd960ba162d7ed7ddd1781f02a28d62f50577b632"

export KCTF_CTF_DIR="$(realpath --no-symlinks "$(dirname "${BASH_SOURCE-$0}")/..")"

function _kctf_setup_environment {
  KCTF_CONFIG_DIR="$(mktemp -d --tmpdir kctf.XXXXXXXXXX)"
  if [[ $? -ne 0 ]]; then
    return 1
  fi
  export KCTF_CTF_NAME=$(basename "${KCTF_CTF_DIR}")
  export KCTF_BIN="${KCTF_CTF_DIR}/kctf/bin"
  KCTF_SESSION="$(dd if=/dev/urandom bs=1 count=10 2>/dev/null | xxd -ps -c 10)"

  export CLOUDSDK_ACTIVE_CONFIG_NAME="kctf-${KCTF_SESSION}"
  export KUBECONFIG="${KCTF_CONFIG_DIR}/kube.conf"
}

function _kctf_download_dependencies {
  if [[ ! -x "${KCTF_BIN}/yq" ]]; then
    if [[ -e "${KCTF_BIN}/yq" ]]; then
      rm "${KCTF_BIN}/yq" >/dev/null
    fi
    wget "${KCTF_YQ_URL}" -O "${KCTF_BIN}/yq" --quiet || return 1
    sha256sum --status -c <(echo "${KCTF_YQ_HASH}  ${KCTF_BIN}/yq") || return 1
    chmod u+x "${KCTF_BIN}/yq"
  fi
}

function _kctf_cleanup {
  if command -v gcloud >/dev/null 2>&1; then
    unset CLOUDSDK_ACTIVE_CONFIG_NAME
    # regenerate this name in case the user changed the variable
    GCLOUD_CONFIG_NAME="kctf-${KCTF_SESSION}"
    if gcloud config configurations describe "${GCLOUD_CONFIG_NAME}" >/dev/null 2>&1; then
      echo "Deleting gcloud config ${GCLOUD_CONFIG_NAME}"
      CLOUDSDK_CORE_DISABLE_PROMPTS=1 gcloud config configurations delete "${GCLOUD_CONFIG_NAME}"
    fi
  fi
  # regenerate this name in case the user changed the variable
  KUBE_CONFIG_NAME="${KCTF_CONFIG_DIR}/kube-${KCTF_SESSION}.conf"
  if [[ -e "${KUBE_CONFIG_NAME}" ]]; then
    rm "${KUBE_CONFIG_NAME}" >/dev/null
  fi
}

function _kctf_usage {
  echo -e "usage: kctf command subcommand [args]" >&2
  echo -e "available commands:" >&2
  echo -e "  chal:    commands around challenges (creating, deploying, etc.)" >&2
  echo -e "  cluster: commands for managing the cluster " >&2
  echo -e "  config:  create/load a cluster config" >&2
}

# Implemented as a function so that we can set environment variables where needed
function kctf {
  if [[ $# -lt 1 ]]; then
    echo "missing required argument" >&2
    _kctf_usage
    return 1
  fi
  case "$1" in
    -h|--help)
      _kctf_usage
      return 0
      ;;
    chal)
      _kctf_set_active_challenge
      shift
      "${KCTF_CTF_DIR}/kctf/bin/kctf-challenge" $@
      return
      ;;
    cluster)
      shift
      "${KCTF_CTF_DIR}/kctf/bin/kctf-cluster" $@
      return
      ;;
    config)
      shift
      if [[ "$1" == "create" ]] || [[ "$1" == "load" ]]; then
        CONFIG_NAME=$("${KCTF_CTF_DIR}/kctf/bin/kctf-config" $@)
        if [[ $? -ne 0 ]]; then
          return 1
        fi
        source "${KCTF_CTF_DIR}/kctf/config/${CONFIG_NAME}"
        export PROJECT
        export ZONE
        export REGISTRY
        export CLUSTER_NAME
        export DOMAIN_NAME
        KCTF_CONFIG="${CONFIG_NAME}"
      else
        "${KCTF_CTF_DIR}/kctf/bin/kctf-config" $@
      fi
      return
      ;;
    *)
      _kctf_usage
      return 1
      ;;
  esac
}

function _kctf_enable_completion {
  source "${KCTF_BIN}/kctf-completion"
}

function _kctf_error_cleanup {
  unset -f _kctf_download_dependencies
  #unset -f _kctf_cleanup
  unset -f _kctf_usage
  unset -f _kctf_error_cleanup
  unset -f _kctf_enable_completion
  unset -f _kctf_set_active_challenge
  unset -f _kctf_setup_environment
  unset -f _kctf_activate
  unset -f _kctf_chal_string
  unset -f kctf
  unset -f deactivate

  unset KCTF_CONFIG_DIR
  unset KCTF_CTF_DIR
  unset KCTF_CTF_NAME
  unset KCTF_BIN
  unset KCTF_SESSION
  unset KCTF_YQ_URL
  unset KCTF_YQ_HASH
  unset KUBECONFIG

  unset PROJECT
  unset ZONE
  unset REGISTRY
  unset CLUSTER_NAME
  unset DOMAIN_NAME
}

function _kctf_set_active_challenge {
  current_dir="${PWD}"
  while [[ "${current_dir}" == "${KCTF_CTF_DIR}"/* ]]; do
    if [[ -e "${current_dir}/challenge.yaml" ]]; then
      CHALLENGE_NAME=$("${KCTF_BIN}/yq" eval '.metadata.name' "${current_dir}/challenge.yaml" 2>/dev/null)
      if [[ $? -ne 0 ]]; then
        unset CHALLENGE_NAME
      fi
      export CHALLENGE_DIR="${current_dir}"
      export CHALLENGE_NAME
      return 0
    fi
    current_dir="$(dirname ${current_dir})"
  done
  unset CHALLENGE_NAME
}

_KCTF_COLOR1=$'\e[0;32m'
_KCTF_COLOR2=$'\e[0;36m'
_KCTF_COLOR_END=$'\e[0m'

function _kctf_config_string {
  if [ ! -z "${KCTF_CONFIG}" ]; then
    echo "${_KCTF_COLOR1},config=${_KCTF_COLOR2}${KCTF_CONFIG}"
  fi
}

function _kctf_chal_string {
  _kctf_set_active_challenge
  if [ ! -z "${CHALLENGE_NAME}" ]; then
    echo "${_KCTF_COLOR1},chal=${_KCTF_COLOR2}${CHALLENGE_NAME}"
  fi
}

function _kctf_activate {
  if ! _kctf_setup_environment; then
    echo 'error setting up the environment' >&2
    return 1
  fi
  if ! _kctf_download_dependencies; then
    echo 'error downloading dependencies' >&2
    return 1
  fi
  _kctf_enable_completion || echo "loading shell completion failed" >&2
  SAVED_PS1="${PS1}"
  echo "kCTF environment activated. Run \"deactivate\" to exit."
  if kctf config load .lastconfig >/dev/null 2>/dev/null; then
    echo "automatically loaded last config"
  else
    echo "To create a cluster config, run \"kctf config\""
  fi
  PS1="${PS1}${_KCTF_COLOR1}kCTF[ctf=${_KCTF_COLOR2}${KCTF_CTF_NAME}\$(_kctf_config_string)\$(_kctf_chal_string)${_KCTF_COLOR1}] >${_KCTF_COLOR_END} "
}

function deactivate {
  _kctf_cleanup
  _kctf_error_cleanup
  PS1="${SAVED_PS1}"
  unset SAVED_PS1
}

if _kctf_activate; then
  trap _kctf_cleanup EXIT
else
  _kctf_error_cleanup
fi
