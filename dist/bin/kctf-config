#!/bin/bash
# Copyright 2020 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

source "${KCTF_BIN}/kctf-log"

function update_gcloud_config {
  if command -v gcloud >/dev/null 2>&1; then
    _kctf_log "Updating gcloud config."
    ACTIVE_ACCOUNT="$(CLOUDSDK_ACTIVE_CONFIG_NAME= gcloud config get-value core/account 2>/dev/null)"
    if ! gcloud config configurations describe "${CLOUDSDK_ACTIVE_CONFIG_NAME}" >/dev/null 2>/dev/null; then
          gcloud config configurations create --no-activate "${CLOUDSDK_ACTIVE_CONFIG_NAME}" >/dev/null 2>/dev/null || return 1
    fi
    gcloud config set core/account "${ACTIVE_ACCOUNT}" >/dev/null 2>/dev/null
    gcloud config set core/project "${PROJECT}" >/dev/null 2>/dev/null
    gcloud config set compute/zone "${ZONE}" >/dev/null 2>/dev/null
    gcloud config set container/cluster "${CLUSTER_NAME}" >/dev/null 2>/dev/null
  else
    _kctf_log_warn "Configuration created only locally. Gcloud not installed."
  fi
}

function set_lastconfig_link {
  ln -sf "${CONFIG_NAME}" "${KCTF_CTF_DIR}/kctf/config/.lastconfig"
}

function kctf_config_load_usage {
  echo "usage: kctf config load config_name" >&2
}

function kctf_config_load {
  if [[ $# -ne 1 ]]; then
    _kctf_log_err "missing config name"
    kctf_config_load_usage
    return 1
  fi

  if [[ "$1" == "-h" ]] || [[ "$1" == "--help" ]]; then
    kctf_config_load_usage
    return 0
  fi

  CONFIG_NAME="$1"
  if [[ "${CONFIG_NAME}" == ".lastconfig" ]]; then
    CONFIG_NAME=$(readlink "${KCTF_CTF_DIR}/kctf/config/.lastconfig")
    if [[ $? -ne 0 ]]; then
      _kctf_log_err "could not resolve .lastconfig link"
      return 1
    fi
  fi
  CONFIG_PATH="${KCTF_CTF_DIR}/kctf/config/${CONFIG_NAME}"
  shift

  source "${CONFIG_PATH}" || return 1

  case "${CLUSTER_TYPE}" in
    gce)
      update_gcloud_config || return 1
      # try to fetch the creds of the k8s cluster
      gcloud container clusters get-credentials "${CLUSTER_NAME}" >/dev/null 2>/dev/null
      ;;
    kind)
      kube_config=$("${KCTF_BIN}/kind" get kubeconfig --name "${CLUSTER_NAME}" 2>/dev/null)
      if [[ $? -eq 0 ]]; then
        echo "${kube_config}" > "${KUBECONFIG}"
      fi
      ;;
    *)
      _kctf_log_err "unknown cluster type \"${CLUSTER_TYPE}\""
      return 1
      ;;
  esac

  _kctf_log "loaded config"

  set_lastconfig_link

  echo "${CONFIG_NAME}"
}

function kctf_config_list {
  echo "== available configurations =="
  for file in ${KCTF_CTF_DIR}/kctf/config/*; do
    CONFIG_NAME="$(basename $file)"
    if [[ "${CONFIG_NAME}" = ".lastconfig" ]]; then
      continue
    fi
    echo "${CONFIG_NAME}"
  done
}

function kctf_config_create_usage {
  echo "usage: kctf config create [args] config_name" >&2
  echo "  -h|--help       print this help" >&2
  echo "  --type          what kind of cluster to create (default: gce)" >&2
  echo "                  supported values: \"gce\" (remote cluster) and \"kind\" (local cluster)" >&2
  echo "  --project       Required (gce): Google Cloud Platform project name" >&2
  echo "  --zone          GCP Zone (default: europe-west4-b)" >&2
  echo "                  For a list of zones run:" >&2
  echo "                    gcloud compute machine-types list --filter=\"name=( n2-standard-4 )\" --format 'value(zone)'" >&2
  echo "  --registry      Container Registry (default: eu.gcr.io)" >&2
  echo "                  Possible values are us.gcr.io, asia.gcr.io, and eu.gcr.io" >&2
  echo "  --cluster-name  Name of the kubernetes cluster (default: kctf-cluster)" >&2
  echo "  --domain-name   Required (gce): domain name to host challenges under" >&2
  echo "                  Please make sure not to put anything secret in the challenge name." >&2
  echo "                  Supported options:" >&2
  echo "                    \"none\": disable DNS support (might break some functionality)" >&2
  echo "                    \"your.domain.com\": use your own domain. You will have to follow some" >&2
  echo "                                         additional steps to configure your nameserver." >&2
  echo "                    \"yourname.kctf.cluster\": automatically get a subdomain under kctf.cluster" >&2
  echo "  --email-address Optional email address for LetsEncrypt registration (for wildcard certificates)" >&2
  echo "                  To use it, please read and agree to the ACME Subscriber Agreement:" >&2
  echo "                    https://letsencrypt.org/repository/" >&2
  echo "  --start-cluster Start the cluster if it's not running yet" >&2
}

function kctf_config_create {
  # Default Configuration
  CLUSTER_TYPE="gce"
  REGISTRY="eu.gcr.io"
  PROJECT=""
  ZONE="europe-west4-b"
  CLUSTER_NAME="kctf-cluster"
  DOMAIN_NAME=""
  EMAIL_ADDRESS=""
  START_CLUSTER="0"

  OPTS="h"
  LONGOPTS="help,type:,project:,zone:,registry:,cluster-name:,domain-name:,email-address:,start-cluster"
  PARSED=$(getopt --options=$OPTS --longoptions=$LONGOPTS --name "kctf config create" -- "$@")
  if [[ $? -ne 0 ]]; then
    kctf_config_create_usage
    return 1
  fi
  eval set -- "$PARSED"

  while true; do
    case "$1" in
      -h|--help)
        kctf_config_create_usage
        return 1
        ;;
      --type)
        CLUSTER_TYPE=$2
        shift 2
        ;;
      --project)
        PROJECT=$2
        shift 2
        ;;
      --zone)
        ZONE=$2
        shift 2
        ;;
      --registry)
        REGISTRY=$2
        shift 2
        ;;
      --cluster-name)
        CLUSTER_NAME=$2
        shift 2
        ;;
      --domain-name)
        DOMAIN_NAME="$2"
        shift 2
        ;;
      --email-address)
        EMAIL_ADDRESS="$2"
        shift 2
        ;;
      --start-cluster)
        START_CLUSTER="1"
        shift
        ;;
      --)
        shift
        break
        ;;
      *)
        _kctf_log_err "Unrecognized argument \"$1\"."
        kctf_config_create_usage
        return 1
        ;;
    esac
  done

  if [[ $# -ne 1 ]]; then
    _kctf_log_err "kctf config create: config name missing"
    kctf_config_create_usage
    return 1
  fi

  CONFIG_NAME="$1"
  if [[ "${CONFIG_NAME}" == ".lastconfig" ]]; then
    CONFIG_NAME=$(readlink "${KCTF_CTF_DIR}/kctf/config/.lastconfig")
    if [[ $? -ne 0 ]]; then
      _kctf_log_err "could not resolve .lastconfig link"
      return 1
    fi
  fi
  CONFIG_PATH="${KCTF_CTF_DIR}/kctf/config/${CONFIG_NAME}"
  shift

  case "${CLUSTER_TYPE}" in
    gce)
      if [[ -z "$PROJECT" ]]; then
        _kctf_log_err "Missing required argument \"--project\"."
        kctf_config_create_usage
        return 1
      fi
      if [[ -z "${DOMAIN_NAME}" ]]; then
        _kctf_log_err "Missing required argument \"--domain-name\"."
        kctf_config_create_usage
        return 1
      fi
      ;;
    kind)
      ;;
    *)
      _kctf_log_err "unknown cluster type \"${CLUSTER_TYPE}\""
      return 1
      ;;
  esac

  if [[ "${DOMAIN_NAME}" == "none" ]]; then
    DOMAIN_NAME=""
  fi


  mkdir -p "${KCTF_CTF_DIR}/kctf/config"

  if [ -e "${CONFIG_PATH}" ]; then
    _kctf_warn "Overwriting existing config file. Old content:"
    cat "${CONFIG_PATH}" >&2
    rm "${CONFIG_PATH}" >&2
  fi

  cat > "${CONFIG_PATH}" << EOF
CLUSTER_TYPE=${CLUSTER_TYPE}
PROJECT=${PROJECT}
ZONE=${ZONE}
REGISTRY=${REGISTRY}
CLUSTER_NAME=${CLUSTER_NAME}
DOMAIN_NAME=${DOMAIN_NAME}
EMAIL_ADDRESS=${EMAIL_ADDRESS}
EOF

  case "${CLUSTER_TYPE}" in
    gce)
      update_gcloud_config || return 1
      # try to fetch the creds of the k8s cluster
      gcloud container clusters get-credentials "${CLUSTER_NAME}" >/dev/null 2>/dev/null
      GET_CLUSTER_CREDS_RESULT=$?
      ;;
    kind)
      kube_config=$("${KCTF_BIN}/kind" get kubeconfig --name "${CLUSTER_NAME}" 2>/dev/null)
      GET_CLUSTER_CREDS_RESULT=$?
      if [[ "${GET_CLUSTER_CREDS_RESULT}" -eq 0 ]]; then
        echo "${kube_config}" > "${KUBECONFIG}"
      fi
      ;;
    *)
      _kctf_log_err "unknown cluster type \"${CLUSTER_TYPE}\""
      return 1
      ;;
  esac

  # there might be an existing cluster
  # if it already exists, we try to update it
  # otherwise, start it if requested
  if [[ "${START_CLUSTER}" == "1" ]] || [[ ${GET_CLUSTER_CREDS_RESULT} -eq 0 ]]; then
    if [[ ${GET_CLUSTER_CREDS_RESULT} -eq 0 ]]; then
      _kctf_log "Existing cluster found, updating cluster."
    else
      _kctf_log "Starting cluster."
    fi
    export CLUSTER_TYPE
    export PROJECT
    export ZONE
    export REGISTRY
    export CLUSTER_NAME
    export DOMAIN_NAME
    export EMAIL_ADDRESS
    "${KCTF_BIN}/kctf-cluster" start >&2 || return 1
  fi

  set_lastconfig_link

  echo "${CONFIG_NAME}"
}

function kctf_config_usage {
  echo -e "usage: kctf config command [args]" >&2
  echo -e "available commands:" >&2
  echo -e "  create: create a new config" >&2
  echo -e "  list:   list available configs" >&2
  echo -e "  load:   load an existing config" >&2
}

if [[ $# -lt 1 ]]; then
  _kctf_log_err "missing required argument"
  kctf_config_usage
  exit 1
fi
case "$1" in
  -h|--help)
    kctf_config_usage
    exit 0
    ;;
  create)
    shift
    kctf_config_create $@
    ;;
  list)
    shift
    kctf_config_list $@
    ;;
  load)
    shift
    kctf_config_load $@
    ;;
  *)
    kctf_config_usage
    exit 1
    ;;
esac
